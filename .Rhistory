phenotype = "resistant")
rbind(susceptibles, resistances, make.row.names = FALSE)
}
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
yo
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
rbind(susceptibles, resistances, make.row.names = FALSE)
}
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
yo
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))) %>%
rownames_to_column("Sample") %>%
mutate(Sample = gsub("\\.*", "", Sample))
yo
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))) %>%
rownames_to_column("Sample") %>%
mutate(Sample = gsub("\\.*.*", "", Sample))
yo
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))) %>%
rownames_to_column("Sample") %>%
mutate(Sample = gsub("\\..*", "", Sample))
yo
do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return A dataframe of taxa abundances and whether they are susceptible or resistant to vancomycin
#' @export
#'
#' @examples
#' do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
rbind(susceptibles, resistances, make.row.names = FALSE)
}
do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
library(abxidx)
do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- abx_idx_df[abx_idx_df$attribute == each_idx, ]
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
taxon_df <- abx_df[abx_df$rank == lvl, ]
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df[taxon_df$boo, ]
neg_rank <- taxon_df[!taxon_df$boo, ]
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
colnames(do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))))
class(do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))))
library(abxidx)
vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx_outcome
vanco_idx_outcome > 0
library(abxidx)
aero_list <- do.call(rbind, apply(abx_test_df, 2, aerobe_list, row.names(abx_test_df)))
is_susceptible(row.names(abx_test_df), "aerobe")
abx_test_df$a
abx_test_df$a[TRUE]
abx_test_df$a[c(TRUE, TRUE)]
abx_test_df$a[c(TRUE, TRUE, TRUE)]
abx_test_df$a[c(TRUE, TRUE, TRUE, TRUE, TRUE)]
abx_test_df$a[c(TRUE, TRUE, TRUE, TRUE, FALSE)]
abx_test_df$a[c(TRUE, TRUE, FALSE, TRUE, FALSE)]
abx_test_df$a[c(TRUE, TRUE, FALSE, FALSE, FALSE)]
abx_test_df$a[c(TRUE, FALSE, FALSE, FALSE, FALSE)]
abx_test_df$a[c(FALSE, FALSE, FALSE, FALSE, FALSE)]
sum(abx_test_df$a[c(FALSE, FALSE, FALSE, FALSE, FALSE)])
sort(abx_test_df$a[c(FALSE, FALSE, FALSE, FALSE, FALSE)])
library(abxidx)
aero_list <- do.call(rbind, apply(abx_test_df, 2, aerobe_list, row.names(abx_test_df)))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return A dataframe of taxa abundances and whether they are susceptible or resistant to anti-aerobic antibiotics
#' @export
#'
#' @examples
#' do.call(rbind, apply(abx_test_df, 2, aerobe_list, row.names(abx_test_df)))
#'
aerobe_list <- function(abundance, lineage) {
idx <- "aerobe"
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = character(), abundance = numeric(), phenotype = character())
if(length(sorted_abundance_suscept) != 0) {
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
}
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = character(), abundance = numeric(), phenotype = character())
if(length(sorted_abundance_resist) != 0) {
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
}
rbind(susceptibles, resistances, make.row.names = FALSE)
}
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- abx_idx_df[abx_idx_df$attribute == each_idx, ]
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
taxon_df <- abx_df[abx_df$rank == lvl, ]
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df[taxon_df$boo, ]
neg_rank <- taxon_df[!taxon_df$boo, ]
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
aero_list <- do.call(rbind, apply(abx_test_df, 2, aerobe_list, row.names(abx_test_df)))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return A dataframe of taxa abundances and whether they are susceptible or resistant to anti-aerobic antibiotics
#' @export
#'
#' @examples
#' do.call(rbind, apply(abx_test_df, 2, aerobe_list, row.names(abx_test_df)))
#'
aerobe_list <- function(abundance, lineage) {
idx <- "aerobe"
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = character(), abundance = numeric(), phenotype = character())
if(length(sorted_abundance_suscept) != 0) {
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
}
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = character(), abundance = numeric(), phenotype = character())
if(length(sorted_abundance_resist) != 0) {
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
}
rbind(susceptibles, resistances, make.row.names = FALSE)
}
aerobe_list(abx_test_df$a, row.names(abx_test_df))
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
abx_idx_df$a[c(FALSE, FALSE, FALSE, FALSE, FALSE)]
yo <- sort(abx_idx_df$a[c(FALSE, FALSE, FALSE, FALSE, FALSE)], index.return=TRUE, decreasing = TRUE)
yo
length(yo)
length(yo$x)
library(abxidx)
do.call(rbind, apply(abx_test_df, 2, aerobe_list, row.names(abx_test_df)))
rm(list = ls())
do.call(rbind, apply(abx_test_df, 2, aerobe_list, row.names(abx_test_df)))
library(dplyr)
library(tidyr)
##manually curated genus phenotypes from Ceylan
phenotypes_genus <- utils::read.delim(here::here("data-raw", "genera_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Genus") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "gram_positive", "gram_negative", "tetracycline"), values_to = "boo", names_to = "attribute")
View(phenotypes_genus)
##manually curated genus phenotypes from Ceylan
phenotypes_genus <- utils::read.delim(here::here("data-raw", "genera_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Genus") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute")
phenotypes_genus$attribute
unique(phenotypes_genus$attribute)
phenotypes_genus[phenotypes_genus$name=="Gemella"&phenotypes_genus$attribute=="gram_positive", "boo"] <- TRUE
phenotypes_genus[phenotypes_genus$name=="Gemella"&phenotypes_genus$attribute=="gram_negative", "boo"] <- FALSE
unique(phenotypes_genus$attribute)
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute")
abx_idx_df <- rbind(phenotypes_genus, phenotypes_species)
abx_idx_df <- abx_idx_df[c("attribute", "boo", "name", "rank", "doi")]
View(abx_idx_df)
abx_idx_df$attribute
unique(abx_idx_df$attribute)
abxidx::abx_idx_df$attribute
unique(abxidx::abx_idx_df$attribute)
abxidx::abx_idx_df[abx_idx_df$attribute=="gram_negative", ]
abxidx::abx_idx_df[abx_idx_df$attribute=="gram_positive", ]
abxidx::abx_idx_df[abxidx::abx_idx_df$attribute=="gram_negative", ]
abxidx::abx_idx_df[abxidx::abx_idx_df$attribute=="gram_negative"&abxidx::abx_idx_df$boo, ]
yo <- abxidx::abx_idx_df[abxidx::abx_idx_df$attribute=="gram_negative"&abxidx::abx_idx_df$boo, ]
View(yo)
c(0, 1, 0, 1, 1, 1, 0)
a <- c(0, 1, 0, 1, 1, 1, 0)
-a
!a
!a > 0.5
##anaerobes
abx_idx_df[nrow(abx_idx_df)+1,] <- list("anaerobe", TRUE, "Bacteroidales", "Order", "10.1128/microbiolspec.dmih2-0015-2015")
source('~/Google Drive/core_projects/abxidx/data-raw/generate_df.R')
library(abxidx)
?vancomycin_index
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
##manually curated genus phenotypes from Ceylan
phenotypes_genus <- utils::read.delim(here::here("data-raw", "genera_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Genus") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute")
library(dplyr)
library(tidyr)
##manually curated genus phenotypes from Ceylan
phenotypes_genus <- utils::read.delim(here::here("data-raw", "genera_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Genus") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute")
View(phenotypes_genus)
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute")
View(phenotypes_species)
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute") %>%
filter(grepl("Lactobacillus", name))
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute") %>%
filter(grepl("^Lactobacillus", name))
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute") %>%
filter(!grepl("^Lactobacillus", name))
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE)
View(lactobacillus_species)
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE))
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("anaerobe", Growth.conditions), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", Growth.conditions), FALSE, TRUE))
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("Anaerobic", Growth.conditions), ifelse(grepl("Microaerophilic-anaerobic|Preferably anaerobic|Facultatively anaerobic", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE))
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("Anaerobic", Growth.conditions), ifelse(grepl("Microaerophilic-anaerobic|Preferably anaerobic|Facultatively anaerobic", Growth.conditions), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE))
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("Anaerobic|Strictly anaerobic", Growth.conditions), ifelse(grepl("Microaerophilic-anaerobic|Preferably anaerobic|Facultatively anaerobic", Growth.conditions), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE))
unique(lactobacillus_species$Growth.conditions)
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("^Anaerobic|^Strictly anaerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE))
##manually curated lactobacillus database from paper
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("^Anaerobic|^Strictly anaerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline", "vancomycin"), values_to = "boo", names_to = "attribute")
##manually curated lactobacillus database from paper
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("^Anaerobic|^Strictly anaerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-Growth.conditions) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline", "vancomycin"), values_to = "boo", names_to = "attribute")
abx_idx_df <- rbind(phenotypes_genus, phenotypes_species, lactobacillus_species)
##manually curated genus phenotypes from Ceylan
phenotypes_genus <- utils::read.delim(here::here("data-raw", "genera_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Genus") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute")
phenotypes_genus <- phenotypes_genus[-which(phenotypes_genus$name=="Bifidobacterium"&phenotypes_genus$attribute=="anaerobe"), ]
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute") %>%
filter(!grepl("^Lactobacillus", name))
##manually curated lactobacillus database from paper
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("^Anaerobic|^Strictly anaerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-Growth.conditions) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline", "vancomycin"), values_to = "boo", names_to = "attribute")
abx_idx_df <- rbind(phenotypes_genus, phenotypes_species, lactobacillus_species)
View(phenotypes_genus)
##manually curated genus phenotypes from Ceylan
phenotypes_genus <- utils::read.delim(here::here("data-raw", "genera_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Genus") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain, gram_positive, gram_negative)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute")
phenotypes_genus <- phenotypes_genus[-which(phenotypes_genus$name=="Bifidobacterium"&phenotypes_genus$attribute=="anaerobe"), ]
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
unique() %>%
mutate(rank = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|microaerobe or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(aerobe = ifelse(grepl("anaerobe|not indicated|aerotolerant|variable", aerobic_status), FALSE, TRUE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(gram_negative = ifelse(gram_stain == "Gram-negative", TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-c(aerobic_status, gram_stain, gram_positive, gram_negative)) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline"), values_to = "boo", names_to = "attribute") %>%
filter(!grepl("^Lactobacillus", name))
##manually curated lactobacillus database from paper
lactobacillus_species <- utils::read.delim(here::here("data-raw", "Lactobacillus_data.csv"), sep = ",", header = TRUE) %>%
mutate(anaerobe = ifelse(grepl("^Anaerobic|^Strictly anaerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(aerobe = ifelse(grepl("^Aerobic", Growth.conditions), TRUE, FALSE)) %>%
mutate(tetracycline = TRUE) %>%
mutate(doi = as.character(doi), name = as.character(name)) %>%
select(-Growth.conditions) %>%
pivot_longer(cols = c("anaerobe", "aerobe", "tetracycline", "vancomycin"), values_to = "boo", names_to = "attribute")
abx_idx_df <- rbind(phenotypes_genus, phenotypes_species, lactobacillus_species)
abx_idx_df <- abx_idx_df[c("attribute", "boo", "name", "rank", "doi")]
View(abx_idx_df)
source('~/Google Drive/core_projects/abxidx/data-raw/generate_df.R')
library(abxidx)
