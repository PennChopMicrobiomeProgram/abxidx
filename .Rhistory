}
}
polymyxin_n_aztreonam_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "polymyxin_n_aztreonam"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
gram_pos_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
##split taxa name using row names
split_levels <- function(row_names, delim = delim) {
taxa_df <- as.data.frame(do.call(rbind, strsplit(row_names, split = delim)))
colnames(taxa_df) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
##if species is missiing or NA, keep as blank
taxa_df$Species <- ifelse(!(taxa_df$Species %in% c("s__", "", "s__NA", "NA") | is.na(taxa_df$Species)), as.character(taxa_df$Species), "")
##add genus name if missing in species column
taxa_df$Species <- ifelse((mapply(grepl, taxa_df$Genus, taxa_df$Species) | taxa_df$Species == ""), as.character(taxa_df$Species), paste(as.character(taxa_df$Genus), as.character(taxa_df$Species)))
simplified_taxa_df <- as.data.frame(lapply(taxa_df, function(x) {gsub("[kpcofgs]__|NA", "", x)}))
return(simplified_taxa_df)
}
get_suscept_vector <- function(row_names, abx) {
#merge taxa levels by row with the LTP dataframe and count rows that were NA; TODO: combine both sapply functions
not_merged <- function(single_row_name) {
is_missing <- FALSE
each_taxa_row <- Filter(function(x) all(x!=""), single_row_name)
filteredsubset <- merge(each_taxa_row, LTP, by = colnames(each_taxa_row), all.x = TRUE)
if(is.na(any(filteredsubset[, abx]))) {
is_missing <- TRUE
}
return(is_missing)
}
missing_vector <- sapply(1:nrow(row_names), function(row_num){not_merged(row_names[row_num,])})
#merge taxa levels by row with the LTP dataframe and calculate weighted antibiotics index for that row
merge_LTP <- function(single_row_name) {
each_taxa_row <- Filter(function(x) all(x!=""), single_row_name)
filteredsubset <- merge(each_taxa_row, LTP, by = colnames(each_taxa_row), all.x = TRUE)
if(is.na(any(filteredsubset[, abx]))) {
filteredsubset[, abx] <- 0
}
return(sum(filteredsubset[, abx])/nrow(filteredsubset))
}
#apply merge function with taxonomic row
suscept_vector <- sapply(1:nrow(row_names), function(row_num){merge_LTP(row_names[row_num,])})
print("These taxa were treated as resistant because they were not found in LTP database")
print(row_names[missing_vector, ])
return(suscept_vector)
}
calc_index <- function(sample_vector, suscept_vector, weighted) {
TF_suscept_vector <- suscept_vector > 0.5
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector]*suscept_vector[TF_suscept_vector])
if(!weighted) {
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector])
}
return(log10(sum_suscept_taxa/(1-sum_suscept_taxa)))
}
abx_idx_plot <- function(abx_vector, order = F) {
##infinite values are replaced to 10
show_name <- TRUE
plotting_vector <- gsub(-Inf, -10, abx_vector)
plotting_vector <- as.numeric(gsub(Inf, 10, plotting_vector))
if(order) {
plotting_vector <- sort(plotting_vector, decreasing = TRUE)
}
vector_cols <- ifelse(plotting_vector > 0, "green", "red")
if(length(plotting_vector) > 50) {
show_name <- FALSE
}
barplot(unlist(plotting_vector), xlab = "Samples", ylab = "Antibiotics index", names.arg = show_name, col = vector_cols, border = NA, space = 0)
}
##tetracycline isn't implemented yet
tetracycline <- function(taxa) { ##excluding resistance through acquired mobile elements, only trying to get intrinsic resistance
##All bacteria are theoretically susceptible to tetracycline except these bacteria for which some resistant clinical strains were isolated
resistance <- c("g__Acinetobacter s__baumannii",
"g__Bacteroides s__fragilis",
"g__Escherichia s__coli",
"g__Enterobacter",
"g__Enterococcus s__faecalis",
"g__Klebsiella pneumoniae", ##Klebsiella generally susceptible
"g__Pseudomonas s__aeruginosa",
"g__Proteus s__mirabilis",
"g__Staphylococcus s__aureus",
"g__Stenotrophomonas s__maltophilia",
"g__Serratia s__marcescens", ##Intrinsic bacterial multidrug efflux pumps: doi:10.1101/cshperspect.a025387, Table 2
"g__Salmonella s__typhimurium", "g__Campylobacter s__jejuni", ##DOI: 10.1038/nrmicro1464
"g__Bacteroides") #80% of Bacteroides are resistant to tetracyclines due to mobile elements: DOI: 10.1128/mBio.00569-13
tetra_resist <- !grepl(paste0(resistance, collapse = "|"), taxa)
return(tetra_resist)
##Include distribution of tet protection genes on mobile elements? http://faculty.washington.edu/marilynr/, https://doi.org/10.1016/j.femsle.2005.02.034
##Can use the Clinical and Laboratory Standards Institute (CLSI) guideline for assessing resistance?
}
vancomycin_index(test_df)
class(vancomycin_index(test_df))
vancomycin_index(test_df) > 0
library(abx.idx)
library(abx.idx)
vancomycin_index(test_df)
source('~/Google Drive/core_projects/abx.idx/R/abx_index.R')
library(abx.idx)
testthat::context("Testing abx_indx functionality")
testthat::test_that("Testing abx_idx on test df", {
idx_outcome <- vancomycin_index(test_df)
testthat::expect_type(idx_outcome, "list")
testthat::expect_equal(length(idx_outcome), 4)
testthat::expect_equal(idx_outcome > 0, c(a = FALSE, b = FALSE, c = TRUE, d = FALSE)) ##test that there are two samples have positive idx indices
##write tests for the df as well
})
library(abx.idx)
LTP
library(abx.idx)
?barplot
library(abx.idx)
vancomycin_index(test_df)
nitroimidazoles_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
?vancomycin_index
library(abx.idx)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
#' @param plot_order order plot of abx idx
#'
#' @return The calculated antibiotics index for each sample
#' @export
#'
#' @examples
#' \dontrun{
#' vancomycin_index(test_df)
#' }
#'
vancomycin_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "vancomycin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
detach("package:abx.idx", unload=TRUE)
vancomycin_index()
rm(list = ls())
library(abx.idx)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
test_df
vancomycin_index(test_df, plot = T)
test_df
class(test_df)
class(as.data.frame(test_df))
as.data.frame(test_df)
library(abx.idx)
library(abx.idx)
vancomycin_index(test_df)
detach("package:vegan", unload=TRUE)
detach("package:abx.idx", unload=TRUE)
#' @param plot_order order plot of abx idx
#'
#' @return The calculated antibiotics index for each sample
#' @export
#'
#' @examples
#' \dontrun{
#' vancomycin_index(test_df)
#' }
#'
vancomycin_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "vancomycin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
nitroimidazoles_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "nitroimidazole"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
fluoroquinolone_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "fluoroquinolone"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
polymyxin_n_aztreonam_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "polymyxin_n_aztreonam"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
gram_pos_index <- function(df, delim = "; ", weighted = T, plot = F, plot_order = F) {
abx <- "glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
abx_idx_vactor <- lapply(as.data.frame(df), calc_index, suscept_vector, weighted)
if(plot) {
abx_idx_plot(abx_idx_vactor, plot_order)
}
else {
return(abx_idx_vactor)
}
}
##split taxa name using row names
split_levels <- function(row_names, delim = delim) {
taxa_df <- as.data.frame(do.call(rbind, strsplit(row_names, split = delim)))
colnames(taxa_df) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
##if species is missiing or NA, keep as blank
taxa_df$Species <- ifelse(!(taxa_df$Species %in% c("s__", "", "s__NA", "NA") | is.na(taxa_df$Species)), as.character(taxa_df$Species), "")
##add genus name if missing in species column
taxa_df$Species <- ifelse((mapply(grepl, taxa_df$Genus, taxa_df$Species) | taxa_df$Species == ""), as.character(taxa_df$Species), paste(as.character(taxa_df$Genus), as.character(taxa_df$Species)))
simplified_taxa_df <- as.data.frame(lapply(taxa_df, function(x) {gsub("[kpcofgs]__|NA", "", x)}))
return(simplified_taxa_df)
}
get_suscept_vector <- function(row_names, abx) {
#merge taxa levels by row with the LTP dataframe and count rows that were NA; TODO: combine both sapply functions
not_merged <- function(single_row_name) {
is_missing <- FALSE
each_taxa_row <- Filter(function(x) all(x!=""), single_row_name)
filteredsubset <- merge(each_taxa_row, LTP, by = colnames(each_taxa_row), all.x = TRUE)
if(is.na(any(filteredsubset[, abx]))) {
is_missing <- TRUE
}
return(is_missing)
}
missing_vector <- sapply(1:nrow(row_names), function(row_num){not_merged(row_names[row_num,])})
#merge taxa levels by row with the LTP dataframe and calculate weighted antibiotics index for that row
merge_LTP <- function(single_row_name) {
each_taxa_row <- Filter(function(x) all(x!=""), single_row_name)
filteredsubset <- merge(each_taxa_row, LTP, by = colnames(each_taxa_row), all.x = TRUE)
if(is.na(any(filteredsubset[, abx]))) {
filteredsubset[, abx] <- 0
}
return(sum(filteredsubset[, abx])/nrow(filteredsubset))
}
#apply merge function with taxonomic row
suscept_vector <- sapply(1:nrow(row_names), function(row_num){merge_LTP(row_names[row_num,])})
print("These taxa were treated as resistant because they were not found in LTP database")
print(row_names[missing_vector, ])
return(suscept_vector)
}
calc_index <- function(sample_vector, suscept_vector, weighted) {
TF_suscept_vector <- suscept_vector > 0.5
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector]*suscept_vector[TF_suscept_vector])
if(!weighted) {
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector])
}
return(log10(sum_suscept_taxa/(1-sum_suscept_taxa)))
}
abx_idx_plot <- function(abx_vector, order = F) {
##infinite values are replaced to 10
show_name <- TRUE
plotting_vector <- gsub(-Inf, -10, abx_vector)
plotting_vector <- as.numeric(gsub(Inf, 10, plotting_vector))
if(order) {
plotting_vector <- sort(plotting_vector, decreasing = TRUE)
}
vector_cols <- ifelse(plotting_vector > 0, "green", "red")
if(length(plotting_vector) > 50) {
show_name <- FALSE
}
barplot(unlist(plotting_vector), xlab = "Samples", ylab = "Antibiotics index", names.arg = show_name, col = vector_cols, border = NA, space = 0)
}
vancomycin_index(test_df)
test_df <- data.frame(a = c(0.1, 0.4, 0.1, 0.3, 0.1), b = c(0, 0.25, 0.25, 0.25, 0.25), c = c(1, 0, 0, 0, 0), d = c(0, 0, 1, 0, 0))
row.names(test_df) <- c("k__Bacteria; p__Actinobacteria; c__; o__; f__; g__; s__",
"k__Bacteria; p__Firmicutes; c__Clostridia; o__Clostridiales; f__Clostridiaceae; g__Clostridium; s__",
"k__Bacteria; p__Firmicutes; c__Bacilli; o__Lactobacillales; f__Enterococcaceae; g__Enterococcus; s__gallinarum",
"k__Bacteria; p__Firmicutes; c__Negativicutes; o__Veillonellales; f__Veillonellaceae; g__Veillonella; s__parvula",
"k__Bacteria; p__Proteobacteria; c__Gammaproteobacteria; o__Pseudomonadales; f__Pseudomonadaceae; g__; s__"
)
vancomycin_index(test_df)
selecting_LTP_cols <- function(file) {
file %>% select(V5, V11, V1) %>%
mutate(taxon = paste0(V11, ";", V5)) %>%
mutate(semi = nchar(gsub("[^\\;]", "", taxon)))
}
##can rewrite this to be just given one column, do later
mutate_n_select <- function(df) {
df %>%
mutate(anaerobe = ifelse((is.na(anaerobe.y) | aerobic_status == "not indicated"), anaerobe.x, anaerobe.y)) %>%
mutate(gram_positive = ifelse((is.na(gram_positive.y) | gram_stain == "not indicated"), gram_positive.x, gram_positive.y)) %>%
select(-c(anaerobe.x, anaerobe.y, gram_positive.x, gram_positive.y, aerobic_status, gram_stain))
}
LTP_file <- utils::read.delim(here::here("data-raw", "LTPs128_SSU.tsv"), sep = "\t", header = FALSE)
tax_fp <- "/Users/tuv/Google Drive/db/accessionTaxa.sql"
blastAccessions <- LTP_file %>%
mutate(V1 = as.character(paste0(V1, ".1"))) %>%
pull(V1)
library(dplyr)
library(tidyr)
library(taxonomizr)
selecting_LTP_cols <- function(file) {
file %>% select(V5, V11, V1) %>%
mutate(taxon = paste0(V11, ";", V5)) %>%
mutate(semi = nchar(gsub("[^\\;]", "", taxon)))
}
##can rewrite this to be just given one column, do later
mutate_n_select <- function(df) {
df %>%
mutate(anaerobe = ifelse((is.na(anaerobe.y) | aerobic_status == "not indicated"), anaerobe.x, anaerobe.y)) %>%
mutate(gram_positive = ifelse((is.na(gram_positive.y) | gram_stain == "not indicated"), gram_positive.x, gram_positive.y)) %>%
select(-c(anaerobe.x, anaerobe.y, gram_positive.x, gram_positive.y, aerobic_status, gram_stain))
}
LTP_file <- utils::read.delim(here::here("data-raw", "LTPs128_SSU.tsv"), sep = "\t", header = FALSE)
tax_fp <- "/Users/tuv/Google Drive/db/accessionTaxa.sql"
blastAccessions <- LTP_file %>%
mutate(V1 = as.character(paste0(V1, ".1"))) %>%
pull(V1)
ids <- accessionToTaxa(blastAccessions, tax_fp)
LTP_missing <- LTP_file %>%
selecting_LTP_cols() %>%
filter((semi < 6)|(grepl("Unclassified|Unnamed", taxon))) %>%
distinct() %>%
select(taxon, V1)
LTP_5 <- as.data.frame(getTaxonomy(ids, tax_fp)) %>%
cbind(blastAccessions) %>%
filter(!is.na(superkingdom)) %>%
mutate(blastAccessions = gsub("\\.1", "", blastAccessions)) %>%
merge(LTP_missing, by.x = "blastAccessions", by.y = "V1", all.x = TRUE) %>%
filter(!is.na(taxon)) %>%
select(superkingdom, phylum, class, order, family, genus, species) %>%
rename(kingdom = superkingdom) %>%
distinct()
colnames(LTP_5) <- paste(toupper(substring(colnames(LTP_5), 1,1)), substring(colnames(LTP_5), 2), sep="")
##Collapsing LTP subclass and suborder taxonomic levels
LTP_8 <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 8) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Subclass", "Order", "Suborder", "Family", "Genus", "Species")) %>%
select(-c(Subclass, Suborder))
LTP_7_subclass <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 7) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Subclass", "Order", "Family", "Genus", "Species")) %>%
mutate(subclass = grepl("dae$", Subclass)) %>%
filter(subclass) %>%
select(-c(Subclass, subclass))
LTP_7_suborder <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 7) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Order", "Suborder", "Family", "Genus", "Species")) %>%
mutate(subord = grepl("neae$", Suborder)) %>%
filter(subord) %>%
select(-c(Suborder, subord))
##manually curated genus phenotypes from Ceylan
phenotypes_genus <- utils::read.delim(here::here("data-raw", "genera_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
#mutate(level = "Genus") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(doi = as.character(doi)) %>%
rename(Genus = name) %>%
rename(Phenotype_ref = doi)
##manually curated species phenotypes from Ceylan
phenotypes_species <- utils::read.delim(here::here("data-raw", "species_0831.txt"), sep = "\t", header = TRUE) %>%
select(name, aerobic_status, gram_stain, doi) %>%
#mutate(level = "Species") %>%
mutate(anaerobe = ifelse(grepl("anaerobe", aerobic_status), ifelse(grepl("aerobe, microaerobe, or anaerobe|facultative anaerobe", aerobic_status), FALSE, TRUE), FALSE)) %>%
mutate(gram_positive = ifelse(gram_stain == "Gram-positive", TRUE, FALSE)) %>%
mutate(doi = as.character(doi)) %>%
rename(Species = name) %>%
rename(Phenotype_ref = doi)
##Generate a df with taxonomic levels from the LTP
LTP <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 6) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) %>%
rbind(LTP_5, LTP_8, LTP_7_subclass, LTP_7_suborder) %>%
distinct() %>%
filter(!grepl("^Archaea$", Kingdom)) %>%
arrange_all() %>%
#mutate(uniq_id = row_number()) %>%
##Populate df with bacteria characteristics
mutate(gram_positive = grepl("^Actinobacteria$|^Firmicutes$", Phylum)) %>%
mutate(gram_positive = ifelse(grepl("^Negativicutes$", Class), FALSE, gram_positive)) %>%
#anareobe classification reference: https://doi.org/10.1128/microbiolspec.dmih2-0015-2015
mutate(anaerobe = (grepl("^Bacteroidales$", Order)|
(grepl(paste("^Fusobacterium",
"Veillonella",
"Actinomyces",
"Clostridium",
"Peptostreptococcus",
"Propionibacterium",
"Peptoniphilus",
"Finegoldia",
"Anaerococcus",
"Parvimonas",
"Lactobacillus",
"Bifidobacterium",
"Eubacterium",
"Gemella$", sep = "$|^"), Genus)))) %>%
merge(select(phenotypes_genus, Genus, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Genus", all.x = TRUE) %>%
mutate_n_select() %>%
merge(select(phenotypes_species, Species, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Species", all.x = TRUE) %>%
mutate_n_select() %>%
mutate(Phenotype_ref = ifelse(is.na(Phenotype_ref.y), Phenotype_ref.x, Phenotype_ref.y)) %>%
select(-c(Phenotype_ref.x, Phenotype_ref.y)) %>%
mutate(vancomycin = ((gram_positive) |
(grepl("^Bacteroidia$", Class)))& ##https://doi.org/10.1126/sciadv.aax2358; https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5161046/
(!grepl(paste("Lactobacillus rhamnosus",
"Lactobacillus paracasei",
"Lactobacillus plantarum",
"Lactobacillus reuteri",
"Lactobacillus fermentum", ##https://doi.org/10.1093/jac/dkm035
"Enterococcus gallinarum",
"Enterococcus casseliflavus",
"Enterococcus flavescens", sep = "|"), Species))) %>% ##https://doi.org/10.1016/j.jiac.2018.01.001
mutate(vancomycin_ref = ifelse(grepl("^Bacteroidia$", Class), "https://doi.org/10.1126/sciadv.aax2358; https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5161046/", NA)) %>%
mutate(vancomycin_ref = ifelse(grepl(paste("Lactobacillus rhamnosus",
"Lactobacillus paracasei",
"Lactobacillus plantarum",
"Lactobacillus reuteri",
"Lactobacillus fermentum", sep = "|"), Species), "https://doi.org/10.1093/jac/dkm035", vancomycin_ref)) %>%
mutate(vancomycin_ref = ifelse(grepl(paste("Enterococcus gallinarum",
"Enterococcus casseliflavus",
"Enterococcus flavescens", sep = "|"), Species), "https://doi.org/10.1016/j.jiac.2018.01.001", vancomycin_ref)) %>%
mutate(nitroimidazole = anaerobe) %>%
mutate(nitroimidazole_ref = NA) %>%
mutate(fluoroquinolone = !anaerobe) %>%
mutate(fluoroquinolone_ref = NA) %>%
mutate(polymyxin_n_aztreonam = !gram_positive) %>%
mutate(polymyxin_n_aztreonam_ref = NA) %>%
mutate(glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin = gram_positive) %>%
mutate(glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin_ref = NA)
vancomycin_index(test_df)
detach("package:dplyr", unload=TRUE)
detach("package:tidyr", unload=TRUE)
detach("package:dplyr", unload=TRUE)
detach("package:taxonomizr", unload=TRUE)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
remove.packages("abx.idx")
library(abx.idx)
vancomycin_index(test_df)
remove.packages("abx.idx")
install.packages("/Users/tuv/Google Drive/core_projects/abx.idx_0.0.0.9000.tar.gz",repos=NULL,type="source")
library(abx.idx)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
library(abx.idx)
vancomycin_index(test_df)
remove.packages("abx.idx")
library(abx.idx)
vancomycin_index(test_df)
