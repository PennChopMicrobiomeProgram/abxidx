mutate(anaerobe = (grepl("^Bacteroidales$", Order)|
(grepl(paste("^Fusobacterium",
"Veillonella",
"Actinomyces",
"Clostridium",
"Peptostreptococcus",
"Propionibacterium",
"Peptoniphilus",
"Finegoldia",
"Anaerococcus",
"Parvimonas",
"Lactobacillus",
"Bifidobacterium",
"Eubacterium",
"Gemella$", sep = "$|^"), Genus)))) %>%
merge(select(phenotypes_genus, Genus, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Genus", all.x = TRUE) %>%
mutate_n_select() %>%
merge(select(phenotypes_species, Species, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Species", all.x = TRUE) %>%
mutate_n_select() %>%
mutate(Phenotype_ref = ifelse(is.na(Phenotype_ref.y), Phenotype_ref.x, Phenotype_ref.y)) %>%
select(-c(Phenotype_ref.x, Phenotype_ref.y)) %>%
add_abx()
add_abx <- function(df, new_abx) {
#new_col <- enquo(new_abx)
df %>%
mutate(new_abx = "test")
}
##Generate a df with taxonomic levels from the LTP
LTP <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 6) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) %>%
rbind(LTP_5, LTP_8, LTP_7_subclass, LTP_7_suborder) %>%
distinct() %>%
filter(!grepl("^Archaea$", Kingdom)) %>%
arrange_all() %>%
#mutate(uniq_id = row_number()) %>%
##Populate df with bacteria characteristics
mutate(gram_positive = grepl("^Actinobacteria$|^Firmicutes$", Phylum)) %>%
mutate(gram_positive = ifelse(grepl("^Negativicutes$", Class), FALSE, gram_positive)) %>%
#anareobe classification reference: https://doi.org/10.1128/microbiolspec.dmih2-0015-2015
mutate(anaerobe = (grepl("^Bacteroidales$", Order)|
(grepl(paste("^Fusobacterium",
"Veillonella",
"Actinomyces",
"Clostridium",
"Peptostreptococcus",
"Propionibacterium",
"Peptoniphilus",
"Finegoldia",
"Anaerococcus",
"Parvimonas",
"Lactobacillus",
"Bifidobacterium",
"Eubacterium",
"Gemella$", sep = "$|^"), Genus)))) %>%
merge(select(phenotypes_genus, Genus, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Genus", all.x = TRUE) %>%
mutate_n_select() %>%
merge(select(phenotypes_species, Species, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Species", all.x = TRUE) %>%
mutate_n_select() %>%
mutate(Phenotype_ref = ifelse(is.na(Phenotype_ref.y), Phenotype_ref.x, Phenotype_ref.y)) %>%
select(-c(Phenotype_ref.x, Phenotype_ref.y)) %>%
add_abx(vancomycin)
add_abx <- function(df, new_abx) {
new_col <- enquo(new_abx)
df %>%
mutate(new_col = "test")
}
##Generate a df with taxonomic levels from the LTP
LTP <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 6) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) %>%
rbind(LTP_5, LTP_8, LTP_7_subclass, LTP_7_suborder) %>%
distinct() %>%
filter(!grepl("^Archaea$", Kingdom)) %>%
arrange_all() %>%
#mutate(uniq_id = row_number()) %>%
##Populate df with bacteria characteristics
mutate(gram_positive = grepl("^Actinobacteria$|^Firmicutes$", Phylum)) %>%
mutate(gram_positive = ifelse(grepl("^Negativicutes$", Class), FALSE, gram_positive)) %>%
#anareobe classification reference: https://doi.org/10.1128/microbiolspec.dmih2-0015-2015
mutate(anaerobe = (grepl("^Bacteroidales$", Order)|
(grepl(paste("^Fusobacterium",
"Veillonella",
"Actinomyces",
"Clostridium",
"Peptostreptococcus",
"Propionibacterium",
"Peptoniphilus",
"Finegoldia",
"Anaerococcus",
"Parvimonas",
"Lactobacillus",
"Bifidobacterium",
"Eubacterium",
"Gemella$", sep = "$|^"), Genus)))) %>%
merge(select(phenotypes_genus, Genus, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Genus", all.x = TRUE) %>%
mutate_n_select() %>%
merge(select(phenotypes_species, Species, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Species", all.x = TRUE) %>%
mutate_n_select() %>%
mutate(Phenotype_ref = ifelse(is.na(Phenotype_ref.y), Phenotype_ref.x, Phenotype_ref.y)) %>%
select(-c(Phenotype_ref.x, Phenotype_ref.y)) %>%
add_abx(vancomycin)
add_abx <- function(df, new_abx) {
new_col <- enquo(new_abx)
df %>%
mutate(!!new_col = "test")
}
add_abx <- function(df, new_abx) {
new_col <- enquo(new_abx)
df %>%
mutate(!!new_col = "test")
}
add_abx <- function(df, new_abx) {
new_col <- enquo(new_abx)
df %>%
mutate(!!!new_col = "test")
}
add_abx <- function(df, new_abx) {
#new_col <- enquo(new_abx)
df %>%
mutate(enquo(new_abx) = "test")
}
add_abx <- function(df, new_abx) {
#new_col <- enquo(new_abx)
df %>%
mutate(enquo(new_abx) = "test")
}
add_abx <- function(df, new_abx) {
#new_col <- enquo(new_abx)
df %>%
mutate(new_abx = "test")
}
##Generate a df with taxonomic levels from the LTP
LTP <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 6) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) %>%
rbind(LTP_5, LTP_8, LTP_7_subclass, LTP_7_suborder) %>%
distinct() %>%
filter(!grepl("^Archaea$", Kingdom)) %>%
arrange_all() %>%
#mutate(uniq_id = row_number()) %>%
##Populate df with bacteria characteristics
mutate(gram_positive = grepl("^Actinobacteria$|^Firmicutes$", Phylum)) %>%
mutate(gram_positive = ifelse(grepl("^Negativicutes$", Class), FALSE, gram_positive)) %>%
#anareobe classification reference: https://doi.org/10.1128/microbiolspec.dmih2-0015-2015
mutate(anaerobe = (grepl("^Bacteroidales$", Order)|
(grepl(paste("^Fusobacterium",
"Veillonella",
"Actinomyces",
"Clostridium",
"Peptostreptococcus",
"Propionibacterium",
"Peptoniphilus",
"Finegoldia",
"Anaerococcus",
"Parvimonas",
"Lactobacillus",
"Bifidobacterium",
"Eubacterium",
"Gemella$", sep = "$|^"), Genus)))) %>%
merge(select(phenotypes_genus, Genus, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Genus", all.x = TRUE) %>%
mutate_n_select() %>%
merge(select(phenotypes_species, Species, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Species", all.x = TRUE) %>%
mutate_n_select() %>%
mutate(Phenotype_ref = ifelse(is.na(Phenotype_ref.y), Phenotype_ref.x, Phenotype_ref.y)) %>%
select(-c(Phenotype_ref.x, Phenotype_ref.y)) %>%
mutate(vancomycin = ((gram_positive) |
(grepl("^Bacteroidia$", Class)))& ##https://doi.org/10.1126/sciadv.aax2358; https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5161046/
(!grepl(paste("Lactobacillus rhamnosus",
"Lactobacillus paracasei",
"Lactobacillus plantarum",
"Lactobacillus reuteri",
"Lactobacillus fermentum", ##https://doi.org/10.1093/jac/dkm035
"Enterococcus gallinarum",
"Enterococcus casseliflavus",
"Enterococcus flavescens", sep = "|"), Species))) %>% ##https://doi.org/10.1016/j.jiac.2018.01.001
mutate(vancomycin_ref = ifelse(grepl("^Bacteroidia$", Class), "https://doi.org/10.1126/sciadv.aax2358; https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5161046/", NA)) %>%
mutate(vancomycin_ref = ifelse(grepl(paste("Lactobacillus rhamnosus",
"Lactobacillus paracasei",
"Lactobacillus plantarum",
"Lactobacillus reuteri",
"Lactobacillus fermentum", sep = "|"), Species), "https://doi.org/10.1093/jac/dkm035", vancomycin_ref)) %>%
mutate(vancomycin_ref = ifelse(grepl(paste("Enterococcus gallinarum",
"Enterococcus casseliflavus",
"Enterococcus flavescens", sep = "|"), Species), "https://doi.org/10.1016/j.jiac.2018.01.001", vancomycin_ref))
mutate(polymyxin_n_aztreonam = !gram_positive) %>%
mutate(polymyxin_n_aztreonam_ref = NA) %>%
mutate(glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin = gram_positive) %>%
mutate(glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin_ref = NA)
##Generate a df with taxonomic levels from the LTP
LTP <- LTP_file %>%
selecting_LTP_cols() %>%
filter(!grepl("Unclassified|Unnamed", taxon)) %>%
filter(semi == 6) %>%
distinct() %>%
select(taxon) %>%
separate(., col = taxon, sep = ";", into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) %>%
rbind(LTP_5, LTP_8, LTP_7_subclass, LTP_7_suborder) %>%
distinct() %>%
filter(!grepl("^Archaea$", Kingdom)) %>%
arrange_all() %>%
#mutate(uniq_id = row_number()) %>%
##Populate df with bacteria characteristics
mutate(gram_positive = grepl("^Actinobacteria$|^Firmicutes$", Phylum)) %>%
mutate(gram_positive = ifelse(grepl("^Negativicutes$", Class), FALSE, gram_positive)) %>%
#anareobe classification reference: https://doi.org/10.1128/microbiolspec.dmih2-0015-2015
mutate(anaerobe = (grepl("^Bacteroidales$", Order)|
(grepl(paste("^Fusobacterium",
"Veillonella",
"Actinomyces",
"Clostridium",
"Peptostreptococcus",
"Propionibacterium",
"Peptoniphilus",
"Finegoldia",
"Anaerococcus",
"Parvimonas",
"Lactobacillus",
"Bifidobacterium",
"Eubacterium",
"Gemella$", sep = "$|^"), Genus)))) %>%
merge(select(phenotypes_genus, Genus, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Genus", all.x = TRUE) %>%
mutate_n_select() %>%
merge(select(phenotypes_species, Species, anaerobe, aerobic_status, gram_positive, gram_stain, Phenotype_ref), by = "Species", all.x = TRUE) %>%
mutate_n_select() %>%
mutate(Phenotype_ref = ifelse(is.na(Phenotype_ref.y), Phenotype_ref.x, Phenotype_ref.y)) %>%
select(-c(Phenotype_ref.x, Phenotype_ref.y)) %>%
mutate(vancomycin = ((gram_positive) |
(grepl("^Bacteroidia$", Class)))& ##https://doi.org/10.1126/sciadv.aax2358; https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5161046/
(!grepl(paste("Lactobacillus rhamnosus",
"Lactobacillus paracasei",
"Lactobacillus plantarum",
"Lactobacillus reuteri",
"Lactobacillus fermentum", ##https://doi.org/10.1093/jac/dkm035
"Enterococcus gallinarum",
"Enterococcus casseliflavus",
"Enterococcus flavescens", sep = "|"), Species))) %>% ##https://doi.org/10.1016/j.jiac.2018.01.001
mutate(vancomycin_ref = ifelse(grepl("^Bacteroidia$", Class), "https://doi.org/10.1126/sciadv.aax2358; https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5161046/", NA)) %>%
mutate(vancomycin_ref = ifelse(grepl(paste("Lactobacillus rhamnosus",
"Lactobacillus paracasei",
"Lactobacillus plantarum",
"Lactobacillus reuteri",
"Lactobacillus fermentum", sep = "|"), Species), "https://doi.org/10.1093/jac/dkm035", vancomycin_ref)) %>%
mutate(vancomycin_ref = ifelse(grepl(paste("Enterococcus gallinarum",
"Enterococcus casseliflavus",
"Enterococcus flavescens", sep = "|"), Species), "https://doi.org/10.1016/j.jiac.2018.01.001", vancomycin_ref)) %>%
mutate(nitroimidazole = anaerobe) %>%
mutate(nitroimidazole_ref = NA) %>%
mutate(fluoroquinolone = !anaerobe) %>%
mutate(fluoroquinolone_ref = NA) %>%
mutate(polymyxin_n_aztreonam = !gram_positive) %>%
mutate(polymyxin_n_aztreonam_ref = NA) %>%
mutate(glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin = gram_positive) %>%
mutate(glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin_ref = NA)
vancomycin_index(test_df)
?enquo
?eval
?parse
LTP[, "vancomycin"]
#' @param abx Antibiotics of interest to calculate index
#'
#' @return The calculated antibiotics index for each sample
#' @export
#'
#' @examples
#' \dontrun{
#' vancomycin_index(test_df)
#' }
#'
vancomycin_index <- function(df, delim = "; ") {
abx <- "vancomycin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index_weighted, suscept_vector))
}
nitroimidazoles_index <- function(df, delim = "; ") {
abx <- "nitroimidazole"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index_weighted, suscept_vector))
}
##split taxa name using row names
split_levels <- function(row_names, delim = delim) {
taxa_df <- as.data.frame(do.call(rbind, strsplit(row_names, split = delim)))
colnames(taxa_df) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
simplified_taxa_df <- as.data.frame(lapply(taxa_df, function(x) {gsub("[kpcofgs]__", "", x)}))
simplified_taxa_df$Species <- ifelse(simplified_taxa_df$Species != "", paste(simplified_taxa_df$Genus, simplified_taxa_df$Species), "")
return(simplified_taxa_df)
}
get_suscept_vector <- function(row_names, abx) {
#merge taxa levels by row with the LTP dataframe and calculate weighted antibiotics index for that row
merge_LTP <- function(single_row_name) {
each_taxa_row <- Filter(function(x) all(x!=""), single_row_name)
filteredsubset <- merge(each_taxa_row, LTP, by = colnames(each_taxa_row), all.x = TRUE)
return(sum(filteredsubset[, abx])/nrow(filteredsubset))
}
#apply merge function with taxonomic row
return(sapply(1:nrow(row_names), function(row_num){merge_LTP(row_names[row_num,])}))
}
calc_index_weighted <- function(sample_vector, suscept_vector) {
TF_suscept_vector <- suscept_vector > 0.5
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector]*suscept_vector[TF_suscept_vector])
return(log10(sum_suscept_taxa/(1-sum_suscept_taxa)))
}
calc_index_non_weighted <- function(sample_vector, suscept_vector) {
sum_suscept_taxa <- sum(sample_vector[suscept_vector > 0.5])
return(log10(sum_suscept_taxa/(1-sum_suscept_taxa)))
}
##tetracycline isn't implemented yet
tetracycline <- function(taxa) { ##excluding resistance through acquired mobile elements, only trying to get intrinsic resistance
##All bacteria are theoretically susceptible to tetracycline except these bacteria for which some resistant clinical strains were isolated
resistance <- c("g__Acinetobacter s__baumannii",
"g__Bacteroides s__fragilis",
"g__Escherichia s__coli",
"g__Enterobacter",
"g__Enterococcus s__faecalis",
"g__Klebsiella pneumoniae", ##Klebsiella generally susceptible
"g__Pseudomonas s__aeruginosa",
"g__Proteus s__mirabilis",
"g__Staphylococcus s__aureus",
"g__Stenotrophomonas s__maltophilia",
"g__Serratia s__marcescens", ##Intrinsic bacterial multidrug efflux pumps: doi:10.1101/cshperspect.a025387, Table 2
"g__Salmonella s__typhimurium", "g__Campylobacter s__jejuni", ##DOI: 10.1038/nrmicro1464
"g__Bacteroides") #80% of Bacteroides are resistant to tetracyclines due to mobile elements: DOI: 10.1128/mBio.00569-13
tetra_resist <- !grepl(paste0(resistance, collapse = "|"), taxa)
return(tetra_resist)
##Include distribution of tet protection genes on mobile elements? http://faculty.washington.edu/marilynr/, https://doi.org/10.1016/j.femsle.2005.02.034
##Can use the Clinical and Laboratory Standards Institute (CLSI) guideline for assessing resistance?
}
yo <- split_levels(row.names(test_df))
yo <- split_levels(row.names(test_df), delim = "; ")
yo
get_suscept_vector(yo)
get_suscept_vector(yo, "vancomycin")
get_suscept_vector(yo, "nitroimidazole")
get_suscept_vector(yo, "nitroimidazole_ref")
get_suscept_vector(yo, "fluoroquinolone")
get_suscept_vector(yo, "anaerobe")
get_suscept_vector(yo, "polymyxin_n_aztreonam")
vancomycin_index(test_df)
nitroimidazoles_index(test_df)
LTP$polymyxin_n_aztreonam
LTP$glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin
#' @param abx Antibiotics of interest to calculate index
#'
#' @return The calculated antibiotics index for each sample
#' @export
#'
#' @examples
#' \dontrun{
#' vancomycin_index(test_df)
#' }
#'
vancomycin_index <- function(df, delim = "; ") {
abx <- "vancomycin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index_weighted, suscept_vector))
}
nitroimidazoles_index <- function(df, delim = "; ") {
abx <- "nitroimidazole"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index_weighted, suscept_vector))
}
fluoroquinolone_index <- function(df, delim = "; ") {
abx <- "fluoroquinolone"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index_weighted, suscept_vector))
}
polymyxin_n_aztreonam_index <- function(df, delim = "; ") {
abx <- "polymyxin_n_aztreonam"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index_weighted, suscept_vector))
}
gram_pos_index <- function(df, delim = "; ") {
abx <- "glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index_weighted, suscept_vector))
}
##split taxa name using row names
split_levels <- function(row_names, delim = delim) {
taxa_df <- as.data.frame(do.call(rbind, strsplit(row_names, split = delim)))
colnames(taxa_df) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
simplified_taxa_df <- as.data.frame(lapply(taxa_df, function(x) {gsub("[kpcofgs]__", "", x)}))
simplified_taxa_df$Species <- ifelse(simplified_taxa_df$Species != "", paste(simplified_taxa_df$Genus, simplified_taxa_df$Species), "")
return(simplified_taxa_df)
}
get_suscept_vector <- function(row_names, abx) {
#merge taxa levels by row with the LTP dataframe and calculate weighted antibiotics index for that row
merge_LTP <- function(single_row_name) {
each_taxa_row <- Filter(function(x) all(x!=""), single_row_name)
filteredsubset <- merge(each_taxa_row, LTP, by = colnames(each_taxa_row), all.x = TRUE)
return(sum(filteredsubset[, abx])/nrow(filteredsubset))
}
#apply merge function with taxonomic row
return(sapply(1:nrow(row_names), function(row_num){merge_LTP(row_names[row_num,])}))
}
calc_index_weighted <- function(sample_vector, suscept_vector) {
TF_suscept_vector <- suscept_vector > 0.5
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector]*suscept_vector[TF_suscept_vector])
return(log10(sum_suscept_taxa/(1-sum_suscept_taxa)))
}
calc_index_non_weighted <- function(sample_vector, suscept_vector) {
sum_suscept_taxa <- sum(sample_vector[suscept_vector > 0.5])
return(log10(sum_suscept_taxa/(1-sum_suscept_taxa)))
}
##tetracycline isn't implemented yet
tetracycline <- function(taxa) { ##excluding resistance through acquired mobile elements, only trying to get intrinsic resistance
##All bacteria are theoretically susceptible to tetracycline except these bacteria for which some resistant clinical strains were isolated
resistance <- c("g__Acinetobacter s__baumannii",
"g__Bacteroides s__fragilis",
"g__Escherichia s__coli",
"g__Enterobacter",
"g__Enterococcus s__faecalis",
"g__Klebsiella pneumoniae", ##Klebsiella generally susceptible
"g__Pseudomonas s__aeruginosa",
"g__Proteus s__mirabilis",
"g__Staphylococcus s__aureus",
"g__Stenotrophomonas s__maltophilia",
"g__Serratia s__marcescens", ##Intrinsic bacterial multidrug efflux pumps: doi:10.1101/cshperspect.a025387, Table 2
"g__Salmonella s__typhimurium", "g__Campylobacter s__jejuni", ##DOI: 10.1038/nrmicro1464
"g__Bacteroides") #80% of Bacteroides are resistant to tetracyclines due to mobile elements: DOI: 10.1128/mBio.00569-13
tetra_resist <- !grepl(paste0(resistance, collapse = "|"), taxa)
return(tetra_resist)
##Include distribution of tet protection genes on mobile elements? http://faculty.washington.edu/marilynr/, https://doi.org/10.1016/j.femsle.2005.02.034
##Can use the Clinical and Laboratory Standards Institute (CLSI) guideline for assessing resistance?
}
gram_pos_index(test_df)
gram_pos_index(test_df, delim = ";")
gram_pos_index(test_df, delim = " ")
gram_pos_index(test_df, delim = "; ")
polymyxin_n_aztreonam_index(test_df)
#' @param abx Antibiotics of interest to calculate index
#'
#' @return The calculated antibiotics index for each sample
#' @export
#'
#' @examples
#' \dontrun{
#' vancomycin_index(test_df)
#' }
#'
vancomycin_index <- function(df, delim = "; ", weighted = T) {
abx <- "vancomycin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index, suscept_vector, weighted))
}
vancomycin_index(test_df)
calc_index <- function(sample_vector, suscept_vector, weighted) {
TF_suscept_vector <- suscept_vector > 0.5
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector]*suscept_vector[TF_suscept_vector])
if(!weighted) {
sum_suscept_taxa <- sum(sample_vector[TF_suscept_vector])
}
return(log10(sum_suscept_taxa/(1-sum_suscept_taxa)))
}
vancomycin_index(test_df)
vancomycin_index(test_df, weighted = F)
nitroimidazoles_index(test_df)
nitroimidazoles_index(test_df, weighted = F)
nitroimidazoles_index(test_df, weighted = F)
nitroimidazoles_index <- function(df, delim = "; ", weighted = T) {
abx <- "nitroimidazole"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index, suscept_vector, weighted))
}
nitroimidazoles_index(test_df, weighted = F)
nitroimidazoles_index(test_df, weighted = T)
fluoroquinolone_index <- function(df, delim = "; ", weighted = T) {
abx <- "fluoroquinolone"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index, suscept_vector, weighted))
}
polymyxin_n_aztreonam_index <- function(df, delim = "; ", weighted = T) {
abx <- "polymyxin_n_aztreonam"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index, suscept_vector, weighted))
}
gram_pos_index <- function(df, delim = "; ", weighted = T) {
abx <- "glycopeptides_macrolides_oxazolidinones_lincosamides_lipopeptides_amoxicillin"
taxa <- split_levels(row.names(df), delim)
suscept_vector <- get_suscept_vector(taxa, abx)
return(lapply(df, calc_index, suscept_vector, weighted))
}
fluoroquinolone_index(test_df, weighted = T)
fluoroquinolone_index(test_df, weighted = F)
polymyxin_n_aztreonam_index(test_df, weighted = T)
polymyxin_n_aztreonam_index(test_df, weighted = F)
gram_pos_index(test_df, weighted = T)
gram_pos_index(test_df, weighted = F)
test_df
library(abx.idx)
