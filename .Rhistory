colnames(grep_df) == c("attribute", "boo", "name", "level", "doi")
colnames(grep_df) == c("attribute", "boo", "name", "level")
colnames(grep_df) == c("attribute", "boo", "name", "level", "boo")
colnames(grep_df) == c("attribute", "boo", "name", "level", "doi")
abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
class(abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))))
abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))[1, 1]
abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))[1, 0
]
vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
tet_idx_outcome <- apply(abx_test_df, 2, tetracycline_index, row.names(abx_test_df))
tet_idx_outcome
gram_pos_idx_outcome <- apply(abx_test_df, 2, gram_pos_index, row.names(abx_test_df))
gram_pos_idx_outcome
warnings()
vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
warnings()
colnames(grep_df) == c("attribute", "boo", "name", "level", "doi")
warnings()
colnames(grep_df)
paste(colnames(grep_df))
paste0(colnames(grep_df))
paste0(colnames(grep_df), collapse = ", ")
testthat::expect_equal(paste0(colnames(grep_df), collapse = ", "), "attribute, boo, name, level, doi")
paste0(colnames(grep_df), collapse = ", ")
?abx_idx_plot
abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
yo <- abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
class(yo)
attribute(yo)
attributes(yo)
attributes(vanco_idx_outcome)
library(abxidx)
class(vanco_idx_outcome)
grep_df
grepl("aerobe", grep_df$attribute)
source('~/Google Drive/core_projects/abxidx/data-raw/generate_df.R')
library(abxidx)
library(abxidx)
library(abxidx)
vanco_entero_except
rm(list = ls())
library(abxidx)
?vancomycin_index
vancomycin_index(abx_test_df[, 1], row.names(abx_test_df))
vancomycin_index(abx_test_df[, 2], row.names(abx_test_df))
vancomycin_index(abx_test_df[, 3], row.names(abx_test_df))
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
library(abxidx)
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_tbl$level
library(abxidx)
filter(abx_idx_tbl, grepl("Phylum", abx_idx_tbl$level))
filter(abx_idx_tbl, grepl("Order", abx_idx_tbl$level))
filter(abx_idx_tbl, grepl("Class", abx_idx_tbl$level))
filter(abx_idx_tbl, grepl("Family", abx_idx_tbl$level))
library(abxidx)
filter(abx_idx_tbl, grepl("Order", abx_idx_tbl$level))
abx_idx_tbl$attribute
source('~/Google Drive/core_projects/abxidx/data-raw/generate_df.R')
View(abx_idx_tbl)
library(abxidx)
rm(list = ls())
filter(abx_idx_tbl, grepl("Order", abx_idx_tbl$level))
filter(abx_idx_tbl, grepl("Order", abx_idx_tbl$rank))
filter(abx_idx_tbl, grepl("Phylum", abx_idx_tbl$rank))
filter(abx_idx_tbl, grepl("Class", abx_idx_tbl$rank))
filter(abx_idx_tbl, grepl("Order", abx_idx_tbl$rank))
filter(abx_idx_tbl, grepl("Family", abx_idx_tbl$rank))
filter(abx_idx_tbl, grepl("Genus", abx_idx_tbl$rank))
filter(abx_idx_tbl, grepl("Species", abx_idx_tbl$rank))
abx_idx_tbl$rank
unique(abx_idx_tbl$rank)
unique(abx_idx_tbl$rank)[1]
unique(abx_idx_tbl$rank)[2]
unique(abx_idx_tbl$rank)[3]
unique(abx_idx_tbl$rank) %in% c("Phylum", "Class", "Order", "Family", "Genus", "Species")
library(abxidx)
any(abx_idx_tbl$rank == "Order")
any(abx_idx_tbl$rank == "Family")
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_tbl$attribute
abx_idx_tbl$rank
class(abx_idx_tbl$rank)
class(abx_idx_tbl$attribute)
abx_idx_tbl$attribute
is.atomic(abx_idx_tbl$attribute)
is.atomic(abx_idx_tbl$rank)
yo <- filter(abx_idx_tbl, grepl("gram_positive", abx_idx_tbl$attribute))
yo
is.atomic(yo$attribute)
is.atomic(yo$rank)
yo <- filter(abx_idx_tbl, grepl("vancomycin", abx_idx_tbl$attribute))
yo
is.atomic(yo$attribute)
is.atomic(yo$rank)
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
print(each_idx)
abx_df <- filter(abx_idx_tbl, grepl(each_idx, abx_idx_tbl$attribute))
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
taxon_df <- filter(abx_df, grepl(lvl, abx_df$rank))
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df %>%
filter(boo)
neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
yo <- filter(abx_idx_tbl, grepl("gram_positive", abx_idx_tbl$attribute))
yo
yo <- filter(abx_idx_tbl, grepl("vancomycin", abx_idx_tbl$attribute))
yo
?is.vector
is.vector(yo$rank)
is.list(yo$rank)
yo <- filter(abx_idx_tbl, grepl("gram_positive", abx_idx_tbl$attribute))
yo
is.atomic(yo)
yo <- filter(abx_idx_tbl, grepl("vancomycin", abx_idx_tbl$attribute))
is.atomic(yo)
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- filter(abx_idx_tbl, grepl(each_idx, abx_idx_tbl$attribute))
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
taxon_df <- filter(abx_df, grepl(lvl, abx_df$rank))
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df %>%
filter(boo)
neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
is_susceptible(row.names(abx_test_df), c("gram_positive", "vancomycin"))
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- filter(abx_idx_tbl, grepl(each_idx, abx_idx_tbl$attribute))
print(abx_df)
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
taxon_df <- filter(abx_df, grepl(lvl, abx_df$rank))
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df %>%
filter(boo)
neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
is_susceptible(row.names(abx_test_df), c("gram_positive", "vancomycin"))
rm(list = ls())
library(abxidx)
?vancomycin_index
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
warning()
warninga()
warnings()
library(abxidx)
##vanco test
#vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx_outcome <- vancomycin_index(abx_idx_tbl[, 1], row.names(abx_idx_tbl))
vancomycin_index(abx_idx_tbl[, 1], row.names(abx_idx_tbl))
abx_idx_tbl, 1
abx_idx_tbl[, 1]
abx_idx_tbl[, 2]
abx_idx_tbl[, 3]
abx_idx_tbl
##vanco test
#vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx_outcome <- vancomycin_index(abx_test_df[, 1], row.names(abx_idx_tbl))
vanco_idx_outcome
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
##vanco test
#vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx_outcome <- vancomycin_index(abx_test_df[, 1], row.names(abx_test_df))
vanco_idx_outcome
class(vanco_idx_outcome)
yo <- filter(abx_idx_tbl, grepl("vancomycin", abx_idx_tbl$attribute))
yo
yo$rank
source('~/Google Drive/core_projects/abxidx/data-raw/generate_df.R')
abx_idx_tbl
as.data.frame(abx_idx_tbl)
source('~/Google Drive/core_projects/abxidx/data-raw/generate_df.R')
library(abxidx)
class(abx_idx_df)
library(abxidx)
abx_idx_df
class(abx_idx_df)
attributes(abx_idx_df)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- filter(abx_idx_df, grepl(each_idx, abx_idx_df$attribute))
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
#taxon_df <- filter(abx_df, grepl(lvl, abx_df$rank))
taxon_df <- filter(abx_df, grepl(abx_df$rank == lvl))
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df %>%
filter(boo)
neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
is_susceptible(row.names(abx_test_df), "vancomycin")
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- filter(abx_idx_df, grepl(each_idx, abx_idx_df$attribute))
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
#taxon_df <- filter(abx_df, grepl(lvl, abx_df$rank))
taxon_df <- filter(abx_df, abx_df$rank == lvl)
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df %>%
filter(boo)
neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
is_susceptible(row.names(abx_test_df), "vancomycin")
is_susceptible(row.names(abx_test_df), "gram_positive")
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- filter(abx_idx_df, grepl(each_idx, abx_idx_df$attribute))
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
print(is.atomic(abx_df))
#taxon_df <- filter(abx_df, grepl(lvl, abx_df$rank))
taxon_df <- filter(abx_df, abx_df$rank == lvl)
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df %>%
filter(boo)
neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
is_susceptible(row.names(abx_test_df), "gram_positive")
is_susceptible(row.names(abx_test_df), "vancomycin")
library(abxidx)
rm(list = ls())
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
class(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
)
type(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
)
attributes(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
)
?expect_type
typeof(attributes(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
)
vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx_outcome
typeof(vanco_idx_outcome)
yo <- abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
yo
?expect_s4_class
class(vanco_idx_outcome)
attributes(vanco_idx_outcome)
typeof(vanco_idx_outcome)
library(abxidx)
library(abxidx)
library(abxidx)
library(abxidx)
?vancomycin_index
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
vanco_idx
vanco_idx
barplot(vanco_idx)
unlist(vanco_idx)
class(vanco_idx)
abx_idx_plot(vanco_idx)
length(vanco_idx)
yo <- gsub(-Inf, -10, vanco_idx)
yo
yo <- gsub(Inf, 10, yo)
class(yo)
yo <- as.numeric(yo)
yo
vanco_idx
vanco_idx[vanco_idx> 10]
vanco_idx[vanco_idx> 10] <- 10
vanco_idx
abx_test_df
abx_test_df$e <- abx_test_df$c
abx_test_df
vanco_idx
sort(vanco_idx)
#' @param abx_vector The antibiotics vector generated from any of the abxidx functions
#' @param order Order the samples from highest to lowest antibiotics index before plotting
#'
#' @return A plot for the antibiotics index for each sample
#' @export
#'
#' @examples
#' vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#' abx_idx_plot(vanco_idx)
#'
abx_idx_plot <- function(abx_vector, order = F) {
##infinite values are replaced to 10
show_name <- NULL
abx_vector[abx_vector > 10] <- 10
abx_vector[abx_vector < -10] <- -10
if(order) {
abx_vector <- sort(abx_vector, decreasing = TRUE)
}
vector_cols <- ifelse(abx_vector > 0, "green", "red")
if(length(abx_vector) > 50) {
show_name <- FALSE
}
barplot(abx_vector, xlab = "Samples", ylab = "Antibiotics index", names.arg = show_name, col = vector_cols, border = NA, space = 0)
}
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
vanco_idx
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
abx_idx_plot(vanco_idx)
abx_test_df$f <- abx_test_df$b
abx_test_df$g <- abx_test_df$d
abx_test_df$h <- abx_test_df$e
abx_test_df
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx
abx_idx_plot(vanco_idx)
library(abxidx)
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
rm(list = ls())
library(abxidx)
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
