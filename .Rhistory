neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
is_susceptible(row.names(abx_test_df), "vancomycin")
is_susceptible(row.names(abx_test_df), "gram_positive")
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- filter(abx_idx_df, grepl(each_idx, abx_idx_df$attribute))
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
print(is.atomic(abx_df))
#taxon_df <- filter(abx_df, grepl(lvl, abx_df$rank))
taxon_df <- filter(abx_df, abx_df$rank == lvl)
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df %>%
filter(boo)
neg_rank <- taxon_df %>%
filter(!boo)
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
is_susceptible(row.names(abx_test_df), "gram_positive")
is_susceptible(row.names(abx_test_df), "vancomycin")
library(abxidx)
rm(list = ls())
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
library(abxidx)
apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
class(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
)
type(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
)
attributes(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
)
?expect_type
typeof(attributes(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
)
vanco_idx_outcome <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx_outcome
typeof(vanco_idx_outcome)
yo <- abx_idx_plot(apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df)))
yo
?expect_s4_class
class(vanco_idx_outcome)
attributes(vanco_idx_outcome)
typeof(vanco_idx_outcome)
library(abxidx)
library(abxidx)
library(abxidx)
library(abxidx)
?vancomycin_index
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
vanco_idx
vanco_idx
barplot(vanco_idx)
unlist(vanco_idx)
class(vanco_idx)
abx_idx_plot(vanco_idx)
length(vanco_idx)
yo <- gsub(-Inf, -10, vanco_idx)
yo
yo <- gsub(Inf, 10, yo)
class(yo)
yo <- as.numeric(yo)
yo
vanco_idx
vanco_idx[vanco_idx> 10]
vanco_idx[vanco_idx> 10] <- 10
vanco_idx
abx_test_df
abx_test_df$e <- abx_test_df$c
abx_test_df
vanco_idx
sort(vanco_idx)
#' @param abx_vector The antibiotics vector generated from any of the abxidx functions
#' @param order Order the samples from highest to lowest antibiotics index before plotting
#'
#' @return A plot for the antibiotics index for each sample
#' @export
#'
#' @examples
#' vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#' abx_idx_plot(vanco_idx)
#'
abx_idx_plot <- function(abx_vector, order = F) {
##infinite values are replaced to 10
show_name <- NULL
abx_vector[abx_vector > 10] <- 10
abx_vector[abx_vector < -10] <- -10
if(order) {
abx_vector <- sort(abx_vector, decreasing = TRUE)
}
vector_cols <- ifelse(abx_vector > 0, "green", "red")
if(length(abx_vector) > 50) {
show_name <- FALSE
}
barplot(abx_vector, xlab = "Samples", ylab = "Antibiotics index", names.arg = show_name, col = vector_cols, border = NA, space = 0)
}
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
vanco_idx
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
abx_idx_plot(vanco_idx)
abx_test_df$f <- abx_test_df$b
abx_test_df$g <- abx_test_df$d
abx_test_df$h <- abx_test_df$e
abx_test_df
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
vanco_idx
abx_idx_plot(vanco_idx)
library(abxidx)
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
rm(list = ls())
library(abxidx)
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
library(abxidx)
?abx_idx_plot
vanco_idx <- apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
abx_idx_plot(vanco_idx)
library(abxidx)
data.frame
?data.frame
a <- c(1, 2, 3)
b <- c(5, 6, 7, 8)
a
b
data.frame(hi = a, lo = b)
library(abxidx)
abx_test_df
abx_test_df[a]
abx_test_df[b]
abx_test_df$a
sort(abx_test_df$a)
?sort
?vancomycin_index
sort(abx_test_df$a)
which(sort(abx_test_df$a))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
susceptibles <- data.frame(lineage = lineage[suscept_vector], ##this isnt sorted yet
abundance = sort(abundance[suscept_vector], decreasing = TRUE),
phenotype = "susceptible")
susceptibles
}
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
#' Calculate the susceptiblity vector from taxonomic lineage based on the given bacterial phenotype
#'
#' @param taxa The lineage name of taxonomic ranks
#' @param idx The bacterial phenotype to calculate the susceptibility
#'
#' @return A vector of 0 and 1, where 0 is resistant and 1 is susceptible
#'
is_susceptible <- function(taxa, idx) {
suscept_vector <- rep(0, length(taxa))
for(each_idx in idx) {
abx_df <- abx_idx_df[abx_idx_df$attribute == each_idx, ]
for(lvl in c("Phylum", "Class", "Order", "Family", "Genus", "Species")) {
taxon_df <- abx_df[abx_df$rank == lvl, ]
if (dim(taxon_df)[1] != 0) {
pos_suscept_vector <- rep(0, length(taxa))
neg_suscept_vector <- rep(0, length(taxa))
pos_rank <- taxon_df[taxon_df$boo, ]
neg_rank <- taxon_df[!taxon_df$boo, ]
if ((dim(pos_rank)[1] != 0)) {
pos_suscept_vector <- grepl(paste0(pos_rank$name, collapse = "|"), taxa)
pos_suscept_vector <- pos_suscept_vector*1
}
if ((dim(neg_rank)[1] != 0)) {
neg_suscept_vector <- grepl(paste0(neg_rank$name, collapse = "|"), taxa)
neg_suscept_vector <- neg_suscept_vector*-1
}
new_vector <- pos_suscept_vector + neg_suscept_vector
#print(new_vector)
zero_vector_idx <- which(new_vector == 0)
old_suscept_vector <- suscept_vector[zero_vector_idx]
suscept_vector <- new_vector
suscept_vector[zero_vector_idx] <- old_suscept_vector
}
}
}
suscept_vector[which(suscept_vector == -1)] <- 0
suscept_vector
}
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5], ##this isnt sorted yet
abundance = sort(abundance[suscept_vector > 0.5], decreasing = TRUE),
phenotype = "susceptible")
susceptibles
}
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
susceptibles <- data.frame(lineage = lineage[suscept_vector], ##this isnt sorted yet
abundance = sort(abundance[suscept_vector], decreasing = TRUE),
phenotype = "susceptible")
susceptibles
}
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5], ##this isnt sorted yet
abundance = sort(abundance[suscept_vector > 0.5], decreasing = TRUE),
phenotype = "susceptible")
susceptibles
}
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
abx_test_df
is_susceptible(row.names(abx_test_df), c("gram_positive", "vancomycin"))
?sort
yo <- sort(abx_test_df$a, index.return = TRUE)
yo
yo$x
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix], ##this isnt sorted yet
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
susceptibles
}
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
abx_test_df
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
rbind(susceptibles, resistances)
}
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
abx_test_df
vancomycin_list(abx_test_df$b, row.names(abx_test_df))
vancomycin_list(abx_test_df$c, row.names(abx_test_df))
vancomycin_list(abx_test_df$d, row.names(abx_test_df))
abx_test_df
abx_test_df$e <- c(.2, .1, .1, .2, .3)
abx_test_df
vancomycin_list(abx_test_df$e, row.names(abx_test_df))
abx_test_df$f <- c(.1, .2, .1, .3, .2)
vancomycin_list(abx_test_df$f, row.names(abx_test_df))
abx_test_df
abx_test_df
library(tidyverse)
abx_test_df %>%
pivot_longer(cols = colnames(.), names_to = "letter", values_to = "abundance")
yo <- abx_test_df %>%
pivot_longer(cols = colnames(.), names_to = "letter", values_to = "abundance")
View(yo)
yo <- abx_test_df %>%
pivot_longer(cols = colnames(.), names_to = "letter", values_to = "abundance")
View(yo)
yo <- abx_test_df %>%
pivot_longer(cols = colnames(.), names_to = "letter", values_to = "abundance") %>%
group_by(letter) %>%
vancomycin_list(abundance, row.names(.))
yo <- abx_test_df %>%
pivot_longer(cols = colnames(.), names_to = "letter", values_to = "abundance") %>%
group_by(letter) %>%
vancomycin_list(abundance, row.names(abx_test_df))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
rbind(susceptibles, resistances)
}
yo <- abx_test_df %>%
pivot_longer(cols = colnames(.), names_to = "letter", values_to = "abundance") %>%
group_by(letter) %>%
vancomycin_list(abundance, row.names(abx_test_df))
row.names(abx_test_df)
?vancomycin_index
apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))
yo <- apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))
yo$a
yo$a
View(yo)
yoyo <- yo$a
View(yoyo)
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
View(yo)
?apply
abx_idx_df
abx_test_df
class(abx_test_df)
matrix(abx_test_df)
as.matrix(abx_test_df)
yo <- do.call(rbind, apply(as.matrix(abx_test_df), 2, vancomycin_list, row.names(abx_test_df)))
View(yo)
vancomycin_list(abx_test_df$c, row.names(abx_test_df))
yo <- apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))
yo
class(yo)
row.names(yo)
yo <- do.call(row.names(), apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
yo <- do.call(row.names, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
yo
yo$lineage
?rbind
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
rbind(susceptibles, resistances, make.row.names = FALSE)
}
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
yo
vancomycin_list(abx_test_df$a, row.names(abx_test_df))
#'
#' @param abundance A list of relative abundances of bacterial taxons for a single sample
#' @param lineage Name of taxonomy lineage for each relative abundance in a sample (e.g. k__Bacteria; p__Bacteroidetes; c__Bacteroidia etc.)
#'
#' @return The calculated antibiotics index for the sample
#' @export
#'
#' @examples
#' apply(abx_test_df, 2, vancomycin_index, row.names(abx_test_df))
#'
vancomycin_list <- function(abundance, lineage) {
idx <- c("gram_positive", "vancomycin")
suscept_vector <- is_susceptible(lineage, idx)
sorted_abundance_suscept <- sort(abundance[suscept_vector > 0.5], index.return=TRUE, decreasing = TRUE)
susceptibles <- data.frame(lineage = lineage[suscept_vector > 0.5][sorted_abundance_suscept$ix],
abundance = sorted_abundance_suscept$x,
phenotype = "susceptible")
sorted_abundance_resist <- sort(abundance[suscept_vector < 0.5], index.return=TRUE, decreasing = TRUE)
resistances <- data.frame(lineage = lineage[suscept_vector < 0.5][sorted_abundance_resist$ix],
abundance = sorted_abundance_resist$x,
phenotype = "resistant")
rbind(susceptibles, resistances, make.row.names = FALSE)
}
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df)))
yo
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))) %>%
rownames_to_column("Sample") %>%
mutate(Sample = gsub("\\.*", "", Sample))
yo
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))) %>%
rownames_to_column("Sample") %>%
mutate(Sample = gsub("\\.*.*", "", Sample))
yo
yo <- do.call(rbind, apply(abx_test_df, 2, vancomycin_list, row.names(abx_test_df))) %>%
rownames_to_column("Sample") %>%
mutate(Sample = gsub("\\..*", "", Sample))
yo
